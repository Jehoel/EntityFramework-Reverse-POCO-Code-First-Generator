using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Text.RegularExpressions;
using Scratch.SchemaReaders;

namespace Scratch
{
    public class GeneratedTextTransformation
    {
        private SchemaReader _schemaReader;

        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        public void WriteLine(string message)
        {
            LogToOutput(message);
        }

        public void Warning(string message)
        {
            LogToOutput(string.Format(CultureInfo.CurrentCulture, "Warning: {0}", message));
        }

        public void Error(string message)
        {
            LogToOutput(string.Format(CultureInfo.CurrentCulture, "Error: {0}", message));
        }

        private void LogToOutput(string message)
        {
            Trace.WriteLine(message);
        }

        private static string ZapPassword()
        {
            var rx = new Regex("password=[^\";]*", RegexOptions.Singleline | RegexOptions.Multiline | RegexOptions.IgnoreCase);
            return rx.Replace(Settings.ConnectionString, "password=**zapped**;");
        }

        public DbProviderFactory GetDbProviderFactory()
        {
            _schemaReader = null;
            Settings.TargetFrameworkVersion = 4.5f;
            Settings.ConnectionString = "Data Source=(local);Initial Catalog=Northwind;Integrated Security=True;Application Name=Scratch";

            WriteLine("// ------------------------------------------------------------------------------------------------");
            WriteLine("// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).");
            WriteLine("// Created by Simon Hughes (https://about.me/simon.hughes).");
            WriteLine("//");
            WriteLine("// Do not make changes directly to this file - edit the template instead.");
            WriteLine("//");

            if (Settings.IncludeConnectionSettingComments)
            {
                WriteLine("// The following connection settings were used to generate this file:");
                if (!string.IsNullOrEmpty(Settings.ConnectionStringName) && !string.IsNullOrEmpty(Settings.ConfigFilePath))
                {
                    WriteLine("//     Configuration file:     \"{0}\"", Settings.ConfigFilePath);
                    WriteLine("//     Connection String Name: \"{0}\"", Settings.ConnectionStringName);
                }
                WriteLine("//     Connection String:      \"{0}\"", ZapPassword());
                WriteLine("// ------------------------------------------------------------------------------------------------");
            }

            if (string.IsNullOrEmpty(Settings.ProviderName))
            {
                Warning("Failed to find providerName in the connection string");
                WriteLine("");
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("//  Failed to find providerName in the connection string");
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("");
                return null;
            }

            try
            {
                return DbProviderFactories.GetFactory(Settings.ProviderName);
            }
            catch (Exception x)
            {
                var error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                Warning(string.Format("Failed to load provider \"{0}\" - {1}", Settings.ProviderName, error));
                WriteLine("");
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("// Failed to load provider \"{0}\" - {1}", Settings.ProviderName, error);
                WriteLine("// ------------------------------------------------------------------------------------------------");
                WriteLine("");
            }
            return null;
        }

        private SchemaReader GetSchemaReader(DbConnection connection, DbProviderFactory factory)
        {
            switch (Settings.DatabaseType)
            {
                case DatabaseType.SqlServer:
                    return new SqlServerSchemaReader(factory, this);

                case DatabaseType.SqlCe:
                    return new SqlServerCeSchemaReader(factory, this);

                case DatabaseType.MySql:
                    return new MySqlSchemaReader(factory, this);

                case DatabaseType.PostgreSQL:
                    return new PostgreSqlSchemaReader(factory, this);

                case DatabaseType.Oracle:
                    return new OracleSchemaReader(factory, this);

                default:
                    WriteLine("Cannot create a schema reader due to unknown database type.");
                    return null;
            }
        }

        public Tables LoadTables(DbProviderFactory factory)
        {
            if (factory == null || !(Settings.ElementsToGenerate.HasFlag(Elements.Poco) ||
                                     Settings.ElementsToGenerate.HasFlag(Elements.Context) ||
                                     Settings.ElementsToGenerate.HasFlag(Elements.UnitOfWork) ||
                                     Settings.ElementsToGenerate.HasFlag(Elements.PocoConfiguration)))
                return new Tables();

            try
            {
                var reader = new SqlServerSchemaReader(factory, this);
                var tables = reader.ReadSchema();
                var fkList = reader.ReadForeignKeys();
                reader.IdentifyForeignKeys(fkList, tables);

                foreach (var t in tables)
                {
                    if (Settings.UseDataAnnotations)
                        t.SetupDataAnnotations();
                    t.Suffix = Settings.TableSuffix;
                }

                // Work out if there are any foreign key relationship naming clashes
                reader.ProcessForeignKeys(fkList, tables, true);
                if (Settings.UseMappingTables)
                    tables.IdentifyMappingTables(fkList, true);

                // Now we know our foreign key relationships and have worked out if there are any name clashes,
                // re-map again with intelligently named relationships.
                tables.ResetNavigationProperties();

                reader.ProcessForeignKeys(fkList, tables, false);
                if (Settings.UseMappingTables)
                    tables.IdentifyMappingTables(fkList, false);

                return tables;
            }
            catch (Exception x)
            {
                string error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                Warning(string.Format("Failed to read database schema - {0}", error));
                WriteLine("");
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("// Failed to read database schema in LoadTables() - {0}", error);
                WriteLine("// -----------------------------------------------------------------------------------------");
                WriteLine("");
                return new Tables();
            }
        }


        private List<StoredProcedure> LoadStoredProcs(DbProviderFactory factory)
        {
            if (factory == null || !Settings.IncludeStoredProcedures)
                return new List<StoredProcedure>();

            try
            {
                using (var conn = factory.CreateConnection())
                {
                    if (conn == null)
                        return new List<StoredProcedure>();

                    conn.ConnectionString = Settings.ConnectionString;
                    conn.Open();

                    if (Settings.IsSqlCe)
                        return new List<StoredProcedure>();

                    var reader = new SqlServerSchemaReader(factory, this);
                    var storedProcs = reader.ReadStoredProcs();
                    conn.Close();

                    // Remove unrequired stored procs
                    for (int i = storedProcs.Count - 1; i >= 0; i--)
                    {
                        if (Settings.SchemaFilterInclude != null &&
                            !Settings.SchemaFilterInclude.IsMatch(storedProcs[i].Schema))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                        if (Settings.StoredProcedureFilterInclude != null &&
                            !Settings.StoredProcedureFilterInclude.IsMatch(storedProcs[i].Name))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                        if (!Settings.StoredProcedureFilter(storedProcs[i]))
                        {
                            storedProcs.RemoveAt(i);
                            continue;
                        }
                    }

                    using (var sqlConnection = new SqlConnection(Settings.ConnectionString))
                    {
                        foreach (var proc in storedProcs)
                            reader.ReadStoredProcReturnObject(sqlConnection, proc);
                    }

                    // Remove stored procs where the return model type contains spaces and cannot be mapped
                    // Also need to remove any TVF functions with parameters that are non scalar types, such as DataTable
                    var validStoredProcedures = new List<StoredProcedure>();
                    foreach (var sp in storedProcs)
                    {
                        if (!sp.ReturnModels.Any())
                        {
                            validStoredProcedures.Add(sp);
                            continue;
                        }

                        if (sp.ReturnModels.Any(returnColumns => returnColumns.Any(c => c.ColumnName.Contains(" "))))
                            continue;

                        if (sp.IsTVF && sp.Parameters.Any(c => c.PropertyType == "System.Data.DataTable"))
                            continue;

                        validStoredProcedures.Add(sp);
                    }
                    return validStoredProcedures;
                }
            }
            catch (Exception x)
            {
                var error = x.Message.Replace("\r\n", "\n").Replace("\n", " ");
                Warning(string.Format("Failed to read database schema for stored procedures - {0}", error));
                WriteLine("");
                WriteLine(
                    "// -----------------------------------------------------------------------------------------");
                WriteLine("// Failed to read database schema for stored procedures - {0}", error);
                WriteLine(
                    "// -----------------------------------------------------------------------------------------");
                WriteLine("");
                return new List<StoredProcedure>();
            }
        }
    }
}